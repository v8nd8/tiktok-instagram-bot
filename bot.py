import os
import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = '7240087170:AAEYeJrZyYPleAX0pwTRPwmW3dwKbe5GIog'  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL = '@mirznan1'  # –í–∞—à –∫–∞–Ω–∞–ª (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "üì§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏–∑ TikTok –∏–ª–∏ Instagram, –∏ —è —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ!\n"
        f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL}"
    )

def is_subscribed(user_id: int, context: CallbackContext) -> bool:
    try:
        member = context.bot.get_chat_member(CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not is_subscribed(user_id, context):
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL[1:]}")],
                [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
            ])
        )
        return

    text = update.message.text
    if "tiktok.com" in text:
        download_tiktok(update, context)
    elif "instagram.com" in text:
        download_instagram(update, context)
    else:
        update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É TikTok –∏–ª–∏ Instagram")

def download_tiktok(update: Update, context: CallbackContext):
    try:
        url = update.message.text
        api_url = f"https://tikwm.com/api/?url={url}"
        response = requests.get(api_url).json()
        
        video_url = response['data']['play']
        update.message.reply_video(
            video=video_url,
            caption=f"üé• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!\n–ü–æ–¥–ø–∏—à–∏—Å—å: {CHANNEL}"
        )
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def download_instagram(update: Update, context: CallbackContext):
    try:
        url = update.message.text
        api_url = "https://instagram-downloader-download-instagram-videos-stories.p.rapidapi.com/index"
        params = {"url": url}
        
        response = requests.get(api_url, params=params).json()
        video_url = response['media']
        
        update.message.reply_video(
            video=video_url,
            caption=f"üì∏ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!\n–ü–æ–¥–ø–∏—à–∏—Å—å: {CHANNEL}"
        )
    except:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ")

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "check_sub":
        if is_subscribed(query.from_user.id, context):
            query.answer("‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏!")
            query.edit_message_text("‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É")
        else:
            query.answer("üò¢ –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", show_alert=True)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(button_callback))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
